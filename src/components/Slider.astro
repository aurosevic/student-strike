---
import { Icon } from 'astro-icon/components';
import Card from './Card.astro';
import type { Post } from './RecentPosts.astro';
import { ICON_SIZE_LG, ICON_SIZE_MD } from 'consts';

export interface Props {
  posts: Post[];
  key: string;
}

const { posts, key } = Astro.props;
const n = posts.length;
---

<style>
  .carousel {
    position: relative;
    width: 100%;
    overflow: hidden;
    border-radius: 10px;
  }

  .carousel-inner {
    display: flex;
    transition: transform 0.3s ease-in-out;
  }

  .carousel-item {
    min-width: 100%;
    margin-right: 5%;
    transition: opacity 0.5s;
  }

  .carousel-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 4px 8px;
    cursor: pointer;
    border-radius: 50%;
  }

  .carousel-btn:hover {
    background-color: rgba(0, 0, 0, 0.8);
  }

  .prev {
    left: 10px;
  }

  .next {
    right: 10px;
  }

  /* Style for the indicator bullets */
  .carousel-indicators {
    display: flex;
    justify-content: center;
    margin-top: 10px;
  }

  .carousel-indicator {
    width: 10px;
    height: 10px;
    margin: 0 5px;
    background-color: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .carousel-indicator.active {
    background-color: rgba(0, 0, 0, 0.9);
  }

  .carousel-indicator:hover {
    background-color: rgba(0, 0, 0, 0.8);
  }
</style>

<div class="carousel" id={key}>
  <div class="carousel-inner">
    {posts.map((slide, idx) => (
      <div class="carousel-item">
        {<Card {...slide} />}
      </div>
    ))}
  </div>
  <button class="carousel-btn prev">
    <Icon name="mdi:chevron-left" size={ICON_SIZE_LG} />
  </button>
  <button class="carousel-btn next">
    <Icon name="mdi:chevron-right" size={ICON_SIZE_LG} />
  </button>

  <!-- Bullets / Indicators -->
  <div class="carousel-indicators">
    {posts.map((_, idx) => ( 
      <div class="carousel-indicator" data-index={idx}></div>
    ))}
  </div>
</div>

<script define:vars={{n, key}}>
window.addEventListener('load', function() {
    const inner = document.querySelector(`#${key} .carousel-inner`);
    const prevBtn = document.querySelector(`#${key} .prev`);
    const nextBtn = document.querySelector(`#${key} .next`);
    const indicators = document.querySelectorAll(`#${key} .carousel-indicator`);
    const carousel = document.querySelector(`#${key}`);
    let index = 0;
    let touchStartX = 0;
    let touchEndX = 0;
    let touchMoveX = 0;
    let isDragging = false;

    // Function to update the carousel based on the current index
    function updateCarousel() {
      inner.style.transform = `translateX(-${index * 105}%)`;
      // Update active indicator
      indicators.forEach((indicator, i) => {
        if (i === index) {
          indicator.classList.add('active');
        } else {
          indicator.classList.remove('active');
        }
      });
    }

    // Button click listeners
    prevBtn.addEventListener('click', () => {
      index = (index - 1 + n) % n;
      updateCarousel();
    });

    nextBtn.addEventListener('click', () => {
      index = (index + 1) % n;
      updateCarousel();
    });

    // Indicator click listener
    indicators.forEach(indicator => {
      indicator.addEventListener('click', () => {
        index = parseInt(indicator.getAttribute('data-index'));
        updateCarousel();
      });
    });

    // Touch events to handle dragging
    carousel.addEventListener('touchstart', (e) => {
      touchStartX = e.touches[0].clientX;
      touchMoveX = 0;
      isDragging = true;
    });

    carousel.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      touchMoveX = e.touches[0].clientX - touchStartX;
      // Translate the carousel based on touch movement
      inner.style.transform = `translateX(${(-index * 105) + (touchMoveX / window.innerWidth) * 100}%)`;
    });

    carousel.addEventListener('touchend', (e) => {
      isDragging = false;
      touchEndX = e.changedTouches[0].clientX;
      const distanceMoved = touchEndX - touchStartX;

      if (Math.abs(distanceMoved) > 100) {
        // If moved more than 100px, switch slide
        if (distanceMoved < 0) {
          // Swiped left (next slide)
          index = (index + 1) % n;
        } else {
          // Swiped right (previous slide)
          index = (index - 1 + n) % n;
        }
      }
      // Reset the position and update carousel
      updateCarousel();
    });

    // Initial setup of carousel
    updateCarousel();
  });
</script>
