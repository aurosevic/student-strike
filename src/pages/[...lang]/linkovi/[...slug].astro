---
import Base from '@layouts/Base.astro';
import { langs } from '@scripts/i18n';
import { Icon } from 'astro-icon/components';
import { type CollectionEntry, getCollection } from 'astro:content';
import { SITE_TITLE, SITE_DESCRIPTION } from "../../../consts";
import { ICON_SIZE_LG } from 'consts';

export async function getStaticPaths() {
    const linkovi = await getCollection('linkovi');
    let ret = [];

    for (const lang of langs) {
        ret.push(...linkovi.map((post) => ({
            params: { lang: lang, slug: post.id },
            props: post,
        })));
    }

    return ret;
}

type Props = CollectionEntry<'linkovi'> & {lang: string};

const { lang } = Astro.params;
if (typeof lang === "undefined") {
    return Astro.rewrite(`/sr${Astro.url.pathname}`);
}

const linkovi = Astro.props;
---

<Base lang={linkovi.lang} title={SITE_TITLE} description={SITE_DESCRIPTION}>
    <ul>
        {linkovi.data.linkovi.map(link =>
            <li>
                <a href={link.link}>
                    {link.ikonica !== "bez" && <Icon size={ICON_SIZE_LG} name={`mdi:${link.ikonica}`} />}
                    {link.naslov}
                </a>
            </li>
        )}
    </ul>
</Base>

<style>
    ul {
        list-style: none;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 0;
    }

    a {
        display: flex;
        
        text-decoration: none;
        color: black;
        align-items: center;
        gap: 1rem;

        border: 2px solid black;
        border-radius: 0.5rem;
        padding: 1rem;
    }

    a:hover {
        filter: opacity(0.5);
    }
</style>